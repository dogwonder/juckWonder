// Fonts
$default-font-size: 2.2rem;
$default-line-height: 1.5;

//Variables
$typeface: -apple-system, Segoe UI, Roboto, Noto Sans, Ubuntu, Cantarell, Helvetica Neue;

//Themes
$wj-light-grey: #F0F4F8;
$wj-coal: #111;
$wj-dark-grey: #323232;
$wj-yellow: #FECA30;

//Weights
$light: 300;
$regular: 400;
$bold: 900;

// Colors
$text-color: hsl(257, 2%, 0%);

//Social colors
$facebook:      #3b5998;
$twitter:       #00aced;
$whatsapp:      #25D366;
$pinterest:     #CB2027;
$google:        #dd4b39;
$instagram:     #376489;
$linkedin:      #007bb6;
$youtube:       #bb0000;
$email:         #333333;
$social-hover:  #3b3b3b;

// Alert Colors
$alert-yellow:      #ebe16f;
$alert-red:         #FFD9D9;
$alert-green:       #D9FFD9;
$alert-blue:        #d5edf8;
$disabled-gray:     #cfcfcf;

// Margins
$spacer: 2rem;
$spacer-large: $spacer * 2;
$grid-spacer: 1.875rem;


// Media queries from Foundation framework by ZURB
// http://foundation.zurb.com/
// and on GitHub at https://github.com/zurb/foundation

//color functions
/// Slightly lighten a color
/// @access public
/// @param {Color} $color - color to tint
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color
/// @access public
/// @param {Color} $color - color to shade
/// @param {Number} $percentage - percentage of `$color` in returned color
/// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// functions
// originally in https://github.com/zurb/foundation/blob/master/scss/foundation/_functions.scss
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

// Here we define the lower and upper bounds for each media size
$small-range: (0em, 40em); /* 0, 640px */
$medium-range: (40.063em, 64em); /* 641px, 1024px */
$large-range: (64.063em, 80em); /* 1025px, 1280px */
$xlarge-range: (80.063em, 90em); /* 1281px, 1440px */
$xxlarge-range: (90.063em, 120em); /* 1441px, 1920px */
$xxxlarge-range: (120.063em); /* 1921px */

// Media Queries
$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})";
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})";

$medium-down: "#{$screen} and (max-width:#{upper-bound($medium-range)})";

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

$xxxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxxlarge-range)})" !default;
$xxxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxxlarge-range)}) and (max-width:#{upper-bound($xxxlarge-range)})" !default;

/* Example
// From http://alistapart.com/article/using-css-mod-queries-with-range-selectors
li {
@include mod-list(3, 0){
  @include select-range(3, 5){
    // styles for items 3 to 5 in a list mod 3 remainder = 0
    }
  }
}
*/

.show-for-sr {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute !important;
  width: 1px;
}

//Unstyled list
%unstyled_list {
    line-height: 1;
    list-style: none;
    list-style-type: none;
    margin: 0;
    padding: 0;
}

//Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

//Color contrast
@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

  @if abs($color-brightness) < ($light-color/2){
    color: $white;
    border-color: $white;
  }

  @else {
    color: $text-color;
    border-color: $text-color;
  }
}
